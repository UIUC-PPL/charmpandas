module partition
{
    extern module reduction;
    extern module messaging;

    mainchare [migratable] Main
    {
        entry Main(CkArgMsg*);

        entry void init_done();
    };

    group [migratable] Aggregator
    {
        entry Aggregator(CProxy_Main);

        entry [reductiontarget] void init_done();

        entry void gather_table(GatherTableDataMsg* msg);

        entry void receive_command(int epoch, int size, char cmd[size]);

        entry void poll()
        {
            when receive_command[EPOCH] (int epoch, int size, char cmd[size])
                serial "execute command" {
                    execute_command(epoch, size, cmd);
                }
        };

        entry [expedited] void request_join_data();

        entry void receive_remote_indices(RemoteJoinMsg* msg);

        entry void listen_remote_table()
        {
            when receive_remote_indices[EPOCH](RemoteJoinMsg* msg)
                serial "process remote" {
                    process_remote_indices(msg);
                }
        };

        entry void receive_remote_table(RemoteTableMsg* msg);
        
        entry void join(LocalJoinMsg* msg);
    };

    array [1D] Partition
    {
        entry Partition(int num_partitions_, int lb_period_, CProxy_Aggregator agg_proxy_);

        entry void receive_command(int epoch, int size, char cmd[size]);

        entry [reductiontarget] void aggregate_result(CkReductionMsg* msg);

        entry void poll()
        {
            when receive_command[EPOCH] (int epoch, int size, char cmd[size])
                serial "execute command" {
                    execute_command(epoch, size, cmd);
                }
        };

        entry [expedited] void request_local_table(int table_name, std::vector<int> local_indices, 
            uint8_t dir);

        entry [expedited] void request_remote_table(int table_name, std::vector<int> local_indices, 
            uint8_t dir, int pe_dest);
    };
}