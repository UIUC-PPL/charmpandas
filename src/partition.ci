module partition
{
    extern module reduction;

    message GatherTableDataMsg
    {
        char data[];
    };

    message JoinTableDataMsg
    {
        char data[];
        char left_keys[];
        char right_keys[];
        int lkey_sizes[];
        int rkey_sizes[];
    };

    message RemoteJoinMsg
    {
        char data[];
    };

    message LocalJoinMsg;

    group [migratable] Aggregator
    {
        entry Aggregator();

        entry void gather_table(GatherTableDataMsg* msg);

        entry [expedited] void request_join_data();

        entry void listen_remote_table()
        {
            when receive_remote_table[JOIN_EPOCH](RemoteJoinMsg* msg)
                serial "process remote" {
                    process_remote_join(msg);
                }
        }

        entry void receive_remote_table(RemoteJoinMsg* msg);
        
        entry void join(LocalJoinMsg* msg);
    }

    array [1D] Partition
    {
        entry Partition(int num_partitions_, int lb_period_, CProxy_Aggregator agg_proxy);

        entry void receive_command(int epoch, int size, char cmd[size]);

        entry [nokeep] void remote_join(JoinTableDataMsg* msg);

        entry void listen_remote_join()
        {
            when remote_join[EPOCH] (JoinTableDataMsg* msg)
                serial "remote join" {
                    process_remote_table(msg);
                }
        }

        entry [reductiontarget] void aggregate_result(CkReductionMsg* msg);

        entry void poll()
        {
            when receive_command[EPOCH] (int epoch, int size, char cmd[size])
                serial "execute command" {
                    execute_command(epoch, size, cmd);
                }
        };
    };
}