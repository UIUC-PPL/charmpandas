module partition
{
    extern module reduction;
    extern module messaging;

    mainchare [migratable] Main
    {
        entry Main(CkArgMsg*);

        entry void init_done();
    };

    group [migratable] Aggregator
    {
        entry Aggregator(CProxy_Main);

        entry [reductiontarget] void init_done();

        entry void gather_table(GatherTableDataMsg* msg);

        entry void deposit_size(int partition, int local_size);

        entry void receive_command(int epoch, int size, char cmd[size]);

        entry void poll()
        {
            when receive_command[EPOCH] (int epoch, int size, char cmd[size])
                serial "execute command" {
                    execute_command(epoch, size, cmd);
                }
        };

        entry [reductiontarget] void assign_keys(int num_elements, int global_hist[num_elements]);
        
        entry void shuffle_data(std::vector<int> pe_map, std::vector<int> expected_loads);

        entry void receive_shuffle_data(RedistTableMsg* msg);

        //entry [reductiontarget] void partition_barrier(int partition_epoch);

        //entry [reductiontarget] void aggregator_barrier(int agg_epoch);

        template <typename T>
        entry void reduction_result(T result, int epoch);

        entry [reductiontarget] void start_polling();
    };

    array [1D] Partition
    {
        entry Partition(int num_partitions_, int lb_period_, CProxy_Aggregator agg_proxy_);

        entry void receive_command(int epoch, int size, char cmd[size]);

        entry [reductiontarget] void aggregate_result(CkReductionMsg* msg);

        entry [reductiontarget] void poll()
        {
            when receive_command[EPOCH] (int epoch, int size, char cmd[size])
                serial "execute command" {
                    execute_command(epoch, size, cmd);
                }
        };

        template <typename T>
        entry [reductiontarget] void reduction_result(T result);
    };
}